version: '3.8'

services:
  # Main Font Identifier Application
  font-identifier:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: font-identifier-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ../recordings:/app/recordings
      - ../config:/app/config
      - app_data:/app/data
      - model_data:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: font-identifier-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - font-identifier
    networks:
      - app_network

  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: font-identifier-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-font_identifier}
      - POSTGRES_USER=${POSTGRES_USER:-font_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    networks:
      - app_network
    ports:
      - "127.0.0.1:5432:5432"  # Only accessible locally

  # Redis for Caching and Sessions
  redis:
    image: redis:6-alpine
    container_name: font-identifier-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - app_network
    ports:
      - "127.0.0.1:6379:6379"  # Only accessible locally

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: font-identifier-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - app_network

  # Grafana for Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: font-identifier-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_123}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - app_network

  # Backup Service
  backup:
    image: postgres:13-alpine
    container_name: font-identifier-backup
    restart: "no"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-font_identifier}
      - POSTGRES_USER=${POSTGRES_USER:-font_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
      - PGHOST=postgres
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["/bin/sh", "/backup.sh"]
    depends_on:
      - postgres
    networks:
      - app_network
    profiles:
      - backup

  # SSL Certificate Management
  certbot:
    image: certbot/certbot:latest
    container_name: font-identifier-certbot
    restart: "no"
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@domain.com --agree-tos --no-eff-email -d your-domain.com -d www.your-domain.com
    profiles:
      - ssl

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_data:
    driver: local
  model_data:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
